{"name":"Honho.GitHub.io","tagline":"","body":"# Machine Learning of Weight Lifting Exercises\r\n\r\n### Author: Hon Yung Ho\r\n\r\n## Executive Summary\r\n\r\nIn this project, we analyze a set of weight lifting exercise data and come up with a predictive model using machine learning algorithm that is able to identify mistakes in weight lifting with high accuracy. \r\n\r\nThe Random Forest machine learning algorithm without Principal Component Analysis produces very high accuracy against the cross validation data set, and precisely predicts the outcomes of 20 testing observations.\r\n\r\n## Background\r\n\r\nUsing devices such as Jawbone Up, Nike FuelBand, and Fitbit it is now possible to collect a large amount of data about personal activity relatively inexpensively. These type of devices are part of the quantified self movement - a group of enthusiasts who take measurements about themselves regularly to improve their health, to find patterns in their behavior, or because they are tech geeks. One thing that people regularly do is quantify how much of a particular activity they do, but they rarely quantify how well they do it. In this project, your goal will be to use data from accelerometers on the belt, forearm, arm, and dumbell of 6 participants. They were asked to perform barbell lifts correctly and incorrectly in 5 different ways. More information is available from the website here: [http://groupware.les.inf.puc-rio.br/har](http://groupware.les.inf.puc-rio.br/har) (see the section on the Weight Lifting Exercise Dataset).\r\n\r\n```{r loadPackage, include=FALSE}\r\nlibrary(caret)\r\nlibrary(randomForest)\r\n```\r\n\r\n## Data File Loadings\r\n\r\nFirst of all, we download both the training and testing data files, and load them to data tables.\r\n\r\n```{r loadData, echo=TRUE}\r\ntrainLocal <- \"pml-training.csv\"\r\ntrainURL <- \"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv\"\r\ntestLocal <- \"pml-testing.csv\"\r\ntestURL <- \"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv\"\r\n\r\nif(!file.exists(trainLocal)) {\r\n        download.file(trainURL, destfile = trainLocal)\r\n}\r\nif(!file.exists(testLocal)) {\r\n        download.file(testURL, destfile = testLocal)\r\n}\r\n\r\n# Also treat empty string as \"NA\"\r\nrawTrain <- read.csv(trainLocal, header = TRUE, na.strings = c(\"NA\", \"\"))\r\nrawTest <- read.csv(testLocal, header = TRUE, na.strings = c(\"NA\", \"\"))\r\n```\r\n\r\n## Exploratory Analyses and Data Cleaning\r\n\r\nWe then preform exploratory analysis and data cleaning wherever is needed on the testing data set.\r\n\r\n```{r explore, echo=TRUE}\r\ndim(rawTrain)\r\ndim(rawTest)\r\n```\r\n\r\nThe training data set has `r nrow(rawTrain)` rows and `r ncol(rawTrain)` columns. And the training data set has `r nrow(rawTest)` rows and `r ncol(rawTest)` columns.\r\n\r\n```{r str, echo=TRUE}\r\n# Display internal structure of the training data set\r\nstr(rawTrain, list.len = 20)\r\n```\r\n\r\n```{r nas, echo=TRUE}\r\n# Get a count of the NAs in each column\r\nunname(colSums(is.na(rawTrain)))\r\n```\r\n\r\nThe internal structure of training data set shows that there are columns that have NA values.\r\n\r\nA further analysis performed by getting a count of the number of NAs in each column shows that columns either have no NAs at all or 19216 NAs, which account for `r round(19216 / nrow(rawTrain) * 100, 2)`% of total observations.\r\n\r\nTherefore, it's safe to exclude these columns from further analysis as they have no significant impact to the rest of the data:\r\n\r\n```{r clean, echo=TRUE}\r\n# Exclude columns with NA value(s)\r\nisColNA <- (colSums(is.na(rawTrain)) > 0)\r\n```\r\n\r\nWe also noticed that the first 7 columns are irrelavent to the data that we are intereted in as we focus on what sensors provided. So we can also exclude them:\r\n\r\n```{r clean2, echo=TRUE}\r\n# Remove the first 7 columns\r\nisColUnrelated <- rep(FALSE, ncol(rawTrain))\r\nisColUnrelated[1:7] <- TRUE\r\n\r\n# Extract the traning and validation data\r\ncleanedTrain <- rawTrain[, !(isColNA | isColUnrelated)]\r\nncol(cleanedTrain)\r\n```\r\n\r\nNow we have `r ncol(cleanedTrain)` columns left for building predictive model.\r\n\r\n## Data Splitting\r\n\r\nNow we are going to split the training data into training and crosss validation sets, with the proportion of 80% and 20%, respectively:\r\n\r\n```{r partition, echo=TRUE}\r\nset.seed(800)\r\n\r\n# Create data partitions\r\nidxTrain <- createDataPartition(y = cleanedTrain$classe, p = 0.8, list = FALSE)\r\n# Set taining data set\r\ntrainData <- cleanedTrain[idxTrain, ]\r\ndim(trainData)\r\n# Set CV data set\r\ncvData <- cleanedTrain[-idxTrain, ]\r\ndim(cvData)\r\n```\r\n\r\nNumbers of observations of training data set and cross validation data set are `r dim(trainData)[1]` and `r dim(cvData)[1]`, respectively.\r\n\r\n## Predictive Models\r\n\r\nWe will compare two predictive models below: Random Forest with and without Principal Component Analysis (PCA). We will use the predictive model with higher accuracy.  \r\n\r\n### Random Forest without PCA\r\n\r\n* We use randomForest() method which implements Breiman's random forest algorithm for classification.  \r\n* Number of trees: 500.\r\n* Number of variables randomly sampled as candidates at each split: 7 (square root of number of variables).  \r\n\r\n```{r trainFit, echo=TRUE, cache=TRUE}\r\n# Create the Random Forest model\r\nrfFit <- randomForest(classe ~ ., data = trainData)\r\nrfFit\r\n```\r\n\r\n#### Cross Validation and Accuracy\r\n\r\n```{r cv, echo=TRUE}\r\n# Perform cross validation\r\ncvPred <- predict(rfFit, cvData)\r\ncvConf <- confusionMatrix(cvData$classe, cvPred)\r\ncvConf$table\r\n```\r\n\r\n```{r cvAccuracy, echo=TRUE}\r\n# Get accuracy\r\ncvAccuracy <- cvConf$overall[\"Accuracy\"]\r\nround(cvAccuracy, 4)\r\n```\r\n\r\nFrom the confusion matrix summary above, we got accuracy of `r round(cvAccuracy, 4)` on cross validation data set.\r\n\r\n### Random Forest with PCA\r\n\r\n* We again use randomForest() method which implements Breiman's random forest algorithm for classification.  \r\n* Number of trees: 500.\r\n\r\n#### Preprocess\r\n```{r preProc, echo=TRUE}\r\n# Get the names of predictors\r\npredNames <- names(cleanedTrain)\r\npredIdx <- grep(\"^classe\", predNames, invert = TRUE)\r\npredNames <- predNames[predIdx]\r\n\r\n# Create preProcess object\r\npreProc <- preProcess(trainData[, predNames], method = \"pca\", thresh = 0.99)\r\npreProc$numComp\r\n```\r\n\r\nPCA needed `r preProc$numComp` components to capture 99% of the variance.\r\nSo the number of variables randomly sampled as candidates at each split will be: 6 (square root of 36).\r\n\r\n```{r trainPC, echo=TRUE}\r\n# Calculate PCs for training data\r\ntrainPC <- predict(preProc, trainData[, predNames])\r\ndim(trainPC)\r\n```\r\n\r\nNumber of columns of training data set with PCs is `r dim(trainPC)[2]`.\r\n\r\n```{r trainPCFit, echo=TRUE, cache=TRUE}\r\n# Create the Random Forest model\r\nrfFitPC <- randomForest(trainData$classe ~ ., data = trainPC)\r\nrfFitPC\r\n```\r\n\r\n#### Cross Validation and Accuracy\r\n\r\n```{r cvPC, echo=TRUE}\r\n# calculate PCs for cv data\r\ncvPC <- predict(preProc, cvData[, predNames])\r\n\r\n# compare results\r\ncvConfPC <- confusionMatrix(cvData$classe, predict(rfFitPC, cvPC))\r\ncvConfPC$table\r\n```\r\n\r\n```{r cvPCAccuracy, echo=TRUE}\r\ncvPCAccuracy <- cvConfPC$overall[\"Accuracy\"]\r\nround(cvPCAccuracy, 4)\r\n```\r\n\r\nFrom the confusion matrix summary above, we got accuracy of `r round(cvPCAccuracy, 4)` on cross validation data set with PCs.\r\n\r\n## Model Selection\r\n\r\n### Comparison of Accuracies and Out-of-Sample Errors\r\n\r\n```{r modSelect, echo=TRUE}\r\nmodCompare <- rbind(c(round(cvAccuracy, 4), round(1 - cvAccuracy, 4)), \r\n               c(round(cvPCAccuracy, 4), round(1 - cvPCAccuracy, 4)))\r\ncolnames(modCompare) <- c(\"Accuracy\", \"Out-of-Sample Err\");\r\nrownames(modCompare) <- c(\"Without PCA\", \"With PCA\");\r\nmodCompare\r\n```\r\n\r\nThe above table shows that the Random Forest model without PCA has slightly higher accuracy. Hence it is chosen as the model to perform prediction on the testing data set.\r\n\r\n## Prediction of Testing Data Set\r\n\r\nNow we predict the testing data set using the Random Forest model without PCA that we derived above:\r\n\r\n```{r preditTest, echo=TRUE}\r\ntestPred <- predict(rfFit, rawTest)\r\ntestPred\r\n```\r\n\r\n## Conclusion\r\n\r\nAmong the algorithms we used against the cross validation data set, the Random Forest without Principal Component Analysis was able to produce as high accuracy as 99.69%, and precisely predict the outcomes of 20 testing observations. Such machine learning algorithm was able to identify mistakes in weight lifting with high accuracy.\r\n\r\n## References\r\n\r\nVelloso, E.; Bulling, A.; Gellersen, H.; Ugulino, W.; Fuks, H. [Qualitative Activity Recognition of Weight Lifting Exercises](http://groupware.les.inf.puc-rio.br/work.jsf?p1=11201). Proceedings of 4th International Conference in Cooperation with SIGCHI (Augmented Human '13) . Stuttgart, Germany: ACM SIGCHI, 2013.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}