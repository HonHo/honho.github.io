{"name":"Honho.GitHub.io","tagline":"","body":"<div class=\"container-fluid main-container\">\r\n\r\n\r\n\r\n\r\n<div id=\"machine-learning-of-weight-lifting-exercises\" class=\"section level1\">\r\n<h1>Machine Learning of Weight Lifting Exercises</h1>\r\n<div id=\"author-hon-yung-ho\" class=\"section level3\">\r\n<h3>Author: Hon Yung Ho</h3>\r\n</div>\r\n<div id=\"executive-summary\" class=\"section level2\">\r\n<h2>Executive Summary</h2>\r\n<p>In this project, we analyze a set of weight lifting exercise data and come up with a predictive model using machine learning algorithm that is able to identify mistakes in weight lifting with high accuracy.</p>\r\n<p>The Random Forest machine learning algorithm without Principal Component Analysis produces very high accuracy against the cross validation data set, and precisely predicts the outcomes of 20 testing observations.</p>\r\n</div>\r\n<div id=\"background\" class=\"section level2\">\r\n<h2>Background</h2>\r\n<p>Using devices such as Jawbone Up, Nike FuelBand, and Fitbit it is now possible to collect a large amount of data about personal activity relatively inexpensively. These type of devices are part of the quantified self movement - a group of enthusiasts who take measurements about themselves regularly to improve their health, to find patterns in their behavior, or because they are tech geeks. One thing that people regularly do is quantify how much of a particular activity they do, but they rarely quantify how well they do it. In this project, your goal will be to use data from accelerometers on the belt, forearm, arm, and dumbell of 6 participants. They were asked to perform barbell lifts correctly and incorrectly in 5 different ways. More information is available from the website here: <a href=\"http://groupware.les.inf.puc-rio.br/har\"><a href=\"http://groupware.les.inf.puc-rio.br/har\" class=\"uri\">http://groupware.les.inf.puc-rio.br/har</a></a> (see the section on the Weight Lifting Exercise Dataset).</p>\r\n</div>\r\n<div id=\"data-file-loadings\" class=\"section level2\">\r\n<h2>Data File Loadings</h2>\r\n<p>First of all, we download both the training and testing data files, and load them to data tables.</p>\r\n<pre class=\"r\"><code>trainLocal &lt;- &quot;pml-training.csv&quot;\r\ntrainURL &lt;- &quot;https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv&quot;\r\ntestLocal &lt;- &quot;pml-testing.csv&quot;\r\ntestURL &lt;- &quot;https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv&quot;\r\n\r\nif(!file.exists(trainLocal)) {\r\n        download.file(trainURL, destfile = trainLocal)\r\n}\r\nif(!file.exists(testLocal)) {\r\n        download.file(testURL, destfile = testLocal)\r\n}\r\n\r\n# Also treat empty string as &quot;NA&quot;\r\nrawTrain &lt;- read.csv(trainLocal, header = TRUE, na.strings = c(&quot;NA&quot;, &quot;&quot;))\r\nrawTest &lt;- read.csv(testLocal, header = TRUE, na.strings = c(&quot;NA&quot;, &quot;&quot;))</code></pre>\r\n</div>\r\n<div id=\"exploratory-analyses-and-data-cleaning\" class=\"section level2\">\r\n<h2>Exploratory Analyses and Data Cleaning</h2>\r\n<p>We then preform exploratory analysis and data cleaning wherever is needed on the testing data set.</p>\r\n<pre class=\"r\"><code>dim(rawTrain)</code></pre>\r\n<pre><code>## [1] 19622   160</code></pre>\r\n<pre class=\"r\"><code>dim(rawTest)</code></pre>\r\n<pre><code>## [1]  20 160</code></pre>\r\n<p>The training data set has 19622 rows and 160 columns. And the training data set has 20 rows and 160 columns.</p>\r\n<pre class=\"r\"><code># Display internal structure of the training data set\r\nstr(rawTrain, list.len = 20)</code></pre>\r\n<pre><code>## 'data.frame':    19622 obs. of  160 variables:\r\n##  $ X                       : int  1 2 3 4 5 6 7 8 9 10 ...\r\n##  $ user_name               : Factor w/ 6 levels &quot;adelmo&quot;,&quot;carlitos&quot;,..: 2 2 2 2 2 2 2 2 2 2 ...\r\n##  $ raw_timestamp_part_1    : int  1323084231 1323084231 1323084231 1323084232 1323084232 1323084232 1323084232 1323084232 1323084232 1323084232 ...\r\n##  $ raw_timestamp_part_2    : int  788290 808298 820366 120339 196328 304277 368296 440390 484323 484434 ...\r\n##  $ cvtd_timestamp          : Factor w/ 20 levels &quot;02/12/2011 13:32&quot;,..: 9 9 9 9 9 9 9 9 9 9 ...\r\n##  $ new_window              : Factor w/ 2 levels &quot;no&quot;,&quot;yes&quot;: 1 1 1 1 1 1 1 1 1 1 ...\r\n##  $ num_window              : int  11 11 11 12 12 12 12 12 12 12 ...\r\n##  $ roll_belt               : num  1.41 1.41 1.42 1.48 1.48 1.45 1.42 1.42 1.43 1.45 ...\r\n##  $ pitch_belt              : num  8.07 8.07 8.07 8.05 8.07 8.06 8.09 8.13 8.16 8.17 ...\r\n##  $ yaw_belt                : num  -94.4 -94.4 -94.4 -94.4 -94.4 -94.4 -94.4 -94.4 -94.4 -94.4 ...\r\n##  $ total_accel_belt        : int  3 3 3 3 3 3 3 3 3 3 ...\r\n##  $ kurtosis_roll_belt      : Factor w/ 396 levels &quot;-0.016850&quot;,&quot;-0.021024&quot;,..: NA NA NA NA NA NA NA NA NA NA ...\r\n##  $ kurtosis_picth_belt     : Factor w/ 316 levels &quot;-0.021887&quot;,&quot;-0.060755&quot;,..: NA NA NA NA NA NA NA NA NA NA ...\r\n##  $ kurtosis_yaw_belt       : Factor w/ 1 level &quot;#DIV/0!&quot;: NA NA NA NA NA NA NA NA NA NA ...\r\n##  $ skewness_roll_belt      : Factor w/ 394 levels &quot;-0.003095&quot;,&quot;-0.010002&quot;,..: NA NA NA NA NA NA NA NA NA NA ...\r\n##  $ skewness_roll_belt.1    : Factor w/ 337 levels &quot;-0.005928&quot;,&quot;-0.005960&quot;,..: NA NA NA NA NA NA NA NA NA NA ...\r\n##  $ skewness_yaw_belt       : Factor w/ 1 level &quot;#DIV/0!&quot;: NA NA NA NA NA NA NA NA NA NA ...\r\n##  $ max_roll_belt           : num  NA NA NA NA NA NA NA NA NA NA ...\r\n##  $ max_picth_belt          : int  NA NA NA NA NA NA NA NA NA NA ...\r\n##  $ max_yaw_belt            : Factor w/ 67 levels &quot;-0.1&quot;,&quot;-0.2&quot;,..: NA NA NA NA NA NA NA NA NA NA ...\r\n##   [list output truncated]</code></pre>\r\n<pre class=\"r\"><code># Get a count of the NAs in each column\r\nunname(colSums(is.na(rawTrain)))</code></pre>\r\n<pre><code>##   [1]     0     0     0     0     0     0     0     0     0     0     0\r\n##  [12] 19216 19216 19216 19216 19216 19216 19216 19216 19216 19216 19216\r\n##  [23] 19216 19216 19216 19216 19216 19216 19216 19216 19216 19216 19216\r\n##  [34] 19216 19216 19216     0     0     0     0     0     0     0     0\r\n##  [45]     0     0     0     0     0 19216 19216 19216 19216 19216 19216\r\n##  [56] 19216 19216 19216 19216     0     0     0     0     0     0     0\r\n##  [67]     0     0 19216 19216 19216 19216 19216 19216 19216 19216 19216\r\n##  [78] 19216 19216 19216 19216 19216 19216     0     0     0 19216 19216\r\n##  [89] 19216 19216 19216 19216 19216 19216 19216 19216 19216 19216 19216\r\n## [100] 19216 19216     0 19216 19216 19216 19216 19216 19216 19216 19216\r\n## [111] 19216 19216     0     0     0     0     0     0     0     0     0\r\n## [122]     0     0     0 19216 19216 19216 19216 19216 19216 19216 19216\r\n## [133] 19216 19216 19216 19216 19216 19216 19216     0 19216 19216 19216\r\n## [144] 19216 19216 19216 19216 19216 19216 19216     0     0     0     0\r\n## [155]     0     0     0     0     0     0</code></pre>\r\n<p>The internal structure of training data set shows that there are columns that have NA values.</p>\r\n<p>A further analysis performed by getting a count of the number of NAs in each column shows that columns either have no NAs at all or 19216 NAs, which account for 97.93% of total observations.</p>\r\n<p>Therefore, it’s safe to exclude these columns from further analysis as they have no significant impact to the rest of the data:</p>\r\n<pre class=\"r\"><code># Exclude columns with NA value(s)\r\nisColNA &lt;- (colSums(is.na(rawTrain)) &gt; 0)</code></pre>\r\n<p>We also noticed that the first 7 columns are irrelavent to the data that we are intereted in as we focus on what sensors provided. So we can also exclude them:</p>\r\n<pre class=\"r\"><code># Remove the first 7 columns\r\nisColUnrelated &lt;- rep(FALSE, ncol(rawTrain))\r\nisColUnrelated[1:7] &lt;- TRUE\r\n\r\n# Extract the traning and validation data\r\ncleanedTrain &lt;- rawTrain[, !(isColNA | isColUnrelated)]\r\nncol(cleanedTrain)</code></pre>\r\n<pre><code>## [1] 53</code></pre>\r\n<p>Now we have 53 columns left for building predictive model.</p>\r\n</div>\r\n<div id=\"data-splitting\" class=\"section level2\">\r\n<h2>Data Splitting</h2>\r\n<p>Now we are going to split the training data into training and crosss validation sets, with the proportion of 80% and 20%, respectively:</p>\r\n<pre class=\"r\"><code>set.seed(800)\r\n\r\n# Create data partitions\r\nidxTrain &lt;- createDataPartition(y = cleanedTrain$classe, p = 0.8, list = FALSE)\r\n# Set taining data set\r\ntrainData &lt;- cleanedTrain[idxTrain, ]\r\ndim(trainData)</code></pre>\r\n<pre><code>## [1] 15699    53</code></pre>\r\n<pre class=\"r\"><code># Set CV data set\r\ncvData &lt;- cleanedTrain[-idxTrain, ]\r\ndim(cvData)</code></pre>\r\n<pre><code>## [1] 3923   53</code></pre>\r\n<p>Numbers of observations of training data set and cross validation data set are 15699 and 3923, respectively.</p>\r\n</div>\r\n<div id=\"predictive-models\" class=\"section level2\">\r\n<h2>Predictive Models</h2>\r\n<p>We will compare two predictive models below: Random Forest with and without Principal Component Analysis (PCA). We will use the predictive model with higher accuracy.</p>\r\n<div id=\"random-forest-without-pca\" class=\"section level3\">\r\n<h3>Random Forest without PCA</h3>\r\n<ul>\r\n<li>We use randomForest() method which implements Breiman’s random forest algorithm for classification.<br /></li>\r\n<li>Number of trees: 500.</li>\r\n<li>Number of variables randomly sampled as candidates at each split: 7 (square root of number of variables).</li>\r\n</ul>\r\n<pre class=\"r\"><code># Create the Random Forest model\r\nrfFit &lt;- randomForest(classe ~ ., data = trainData)\r\nrfFit</code></pre>\r\n<pre><code>## \r\n## Call:\r\n##  randomForest(formula = classe ~ ., data = trainData) \r\n##                Type of random forest: classification\r\n##                      Number of trees: 500\r\n## No. of variables tried at each split: 7\r\n## \r\n##         OOB estimate of  error rate: 0.4%\r\n## Confusion matrix:\r\n##      A    B    C    D    E class.error\r\n## A 4461    2    0    0    1 0.000672043\r\n## B   13 3022    3    0    0 0.005266623\r\n## C    0   13 2724    1    0 0.005113221\r\n## D    0    0   23 2549    1 0.009327633\r\n## E    0    0    1    5 2880 0.002079002</code></pre>\r\n<div id=\"cross-validation-and-accuracy\" class=\"section level4\">\r\n<h4>Cross Validation and Accuracy</h4>\r\n<pre class=\"r\"><code># Perform cross validation\r\ncvPred &lt;- predict(rfFit, cvData)\r\ncvConf &lt;- confusionMatrix(cvData$classe, cvPred)\r\ncvConf$table</code></pre>\r\n<pre><code>##           Reference\r\n## Prediction    A    B    C    D    E\r\n##          A 1116    0    0    0    0\r\n##          B    2  755    2    0    0\r\n##          C    0    4  679    1    0\r\n##          D    0    0    2  640    1\r\n##          E    0    0    0    0  721</code></pre>\r\n<pre class=\"r\"><code># Get accuracy\r\ncvAccuracy &lt;- cvConf$overall[&quot;Accuracy&quot;]\r\nround(cvAccuracy, 4)</code></pre>\r\n<pre><code>## Accuracy \r\n##   0.9969</code></pre>\r\n<p>From the confusion matrix summary above, we got accuracy of 0.9969 on cross validation data set.</p>\r\n</div>\r\n</div>\r\n<div id=\"random-forest-with-pca\" class=\"section level3\">\r\n<h3>Random Forest with PCA</h3>\r\n<ul>\r\n<li>We again use randomForest() method which implements Breiman’s random forest algorithm for classification.<br /></li>\r\n<li>Number of trees: 500.</li>\r\n</ul>\r\n<div id=\"preprocess\" class=\"section level4\">\r\n<h4>Preprocess</h4>\r\n<pre class=\"r\"><code># Get the names of predictors\r\npredNames &lt;- names(cleanedTrain)\r\npredIdx &lt;- grep(&quot;^classe&quot;, predNames, invert = TRUE)\r\npredNames &lt;- predNames[predIdx]\r\n\r\n# Create preProcess object\r\npreProc &lt;- preProcess(trainData[, predNames], method = &quot;pca&quot;, thresh = 0.99)\r\npreProc$numComp</code></pre>\r\n<pre><code>## [1] 36</code></pre>\r\n<p>PCA needed 36 components to capture 99% of the variance. So the number of variables randomly sampled as candidates at each split will be: 6 (square root of 36).</p>\r\n<pre class=\"r\"><code># Calculate PCs for training data\r\ntrainPC &lt;- predict(preProc, trainData[, predNames])\r\ndim(trainPC)</code></pre>\r\n<pre><code>## [1] 15699    36</code></pre>\r\n<p>Number of columns of training data set with PCs is 36.</p>\r\n<pre class=\"r\"><code># Create the Random Forest model\r\nrfFitPC &lt;- randomForest(trainData$classe ~ ., data = trainPC)\r\nrfFitPC</code></pre>\r\n<pre><code>## \r\n## Call:\r\n##  randomForest(formula = trainData$classe ~ ., data = trainPC) \r\n##                Type of random forest: classification\r\n##                      Number of trees: 500\r\n## No. of variables tried at each split: 6\r\n## \r\n##         OOB estimate of  error rate: 1.75%\r\n## Confusion matrix:\r\n##      A    B    C    D    E class.error\r\n## A 4453    7    1    1    2 0.002464158\r\n## B   53 2961   19    4    1 0.025345622\r\n## C    7   26 2691   12    2 0.017165814\r\n## D    4    1   88 2471    9 0.039642441\r\n## E    1    9   17   11 2848 0.013167013</code></pre>\r\n</div>\r\n<div id=\"cross-validation-and-accuracy-1\" class=\"section level4\">\r\n<h4>Cross Validation and Accuracy</h4>\r\n<pre class=\"r\"><code># calculate PCs for cv data\r\ncvPC &lt;- predict(preProc, cvData[, predNames])\r\n\r\n# compare results\r\ncvConfPC &lt;- confusionMatrix(cvData$classe, predict(rfFitPC, cvPC))\r\ncvConfPC$table</code></pre>\r\n<pre><code>##           Reference\r\n## Prediction    A    B    C    D    E\r\n##          A 1116    0    0    0    0\r\n##          B   22  730    4    1    2\r\n##          C    0   13  668    2    1\r\n##          D    0    0   14  626    3\r\n##          E    0    3    3    1  714</code></pre>\r\n<pre class=\"r\"><code>cvPCAccuracy &lt;- cvConfPC$overall[&quot;Accuracy&quot;]\r\nround(cvPCAccuracy, 4)</code></pre>\r\n<pre><code>## Accuracy \r\n##   0.9824</code></pre>\r\n<p>From the confusion matrix summary above, we got accuracy of 0.9824 on cross validation data set with PCs.</p>\r\n</div>\r\n</div>\r\n</div>\r\n<div id=\"model-selection\" class=\"section level2\">\r\n<h2>Model Selection</h2>\r\n<div id=\"comparison-of-accuracies-and-out-of-sample-errors\" class=\"section level3\">\r\n<h3>Comparison of Accuracies and Out-of-Sample Errors</h3>\r\n<pre class=\"r\"><code>modCompare &lt;- rbind(c(round(cvAccuracy, 4), round(1 - cvAccuracy, 4)), \r\n               c(round(cvPCAccuracy, 4), round(1 - cvPCAccuracy, 4)))\r\ncolnames(modCompare) &lt;- c(&quot;Accuracy&quot;, &quot;Out-of-Sample Err&quot;);\r\nrownames(modCompare) &lt;- c(&quot;Without PCA&quot;, &quot;With PCA&quot;);\r\nmodCompare</code></pre>\r\n<pre><code>##             Accuracy Out-of-Sample Err\r\n## Without PCA   0.9969            0.0031\r\n## With PCA      0.9824            0.0176</code></pre>\r\n<p>The above table shows that the Random Forest model without PCA has slightly higher accuracy. Hence it is chosen as the model to perform prediction on the testing data set.</p>\r\n</div>\r\n</div>\r\n<div id=\"prediction-of-testing-data-set\" class=\"section level2\">\r\n<h2>Prediction of Testing Data Set</h2>\r\n<p>Now we predict the testing data set using the Random Forest model without PCA that we derived above:</p>\r\n<pre class=\"r\"><code>testPred &lt;- predict(rfFit, rawTest)\r\ntestPred</code></pre>\r\n<pre><code>##  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 \r\n##  B  A  B  A  A  E  D  B  A  A  B  C  B  A  E  E  A  B  B  B \r\n## Levels: A B C D E</code></pre>\r\n</div>\r\n<div id=\"conclusion\" class=\"section level2\">\r\n<h2>Conclusion</h2>\r\n<p>Among the algorithms we used against the cross validation data set, the Random Forest without Principal Component Analysis was able to produce as high accuracy as 99.69%, and precisely predict the outcomes of 20 testing observations. Such machine learning algorithm was able to identify mistakes in weight lifting with high accuracy.</p>\r\n</div>\r\n<div id=\"references\" class=\"section level2\">\r\n<h2>References</h2>\r\n<p>Velloso, E.; Bulling, A.; Gellersen, H.; Ugulino, W.; Fuks, H. <a href=\"http://groupware.les.inf.puc-rio.br/work.jsf?p1=11201\">Qualitative Activity Recognition of Weight Lifting Exercises</a>. Proceedings of 4th International Conference in Cooperation with SIGCHI (Augmented Human ’13) . Stuttgart, Germany: ACM SIGCHI, 2013.</p>\r\n</div>\r\n</div>\r\n\r\n\r\n</div>\r\n\r\n<script>\r\n\r\n// add bootstrap table styles to pandoc tables\r\n$(document).ready(function () {\r\n  $('tr.header').parent('thead').parent('table').addClass('table table-condensed');\r\n});\r\n\r\n</script>\r\n\r\n<!-- dynamically load mathjax for compatibility with self-contained -->\r\n<script>\r\n  (function () {\r\n    var script = document.createElement(\"script\");\r\n    script.type = \"text/javascript\";\r\n    script.src  = \"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\";\r\n    document.getElementsByTagName(\"head\")[0].appendChild(script);\r\n  })();\r\n</script>\r\n\r\n</body>\r\n</html>\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}